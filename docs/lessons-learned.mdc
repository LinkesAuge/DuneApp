---
description:
globs:
alwaysApply: false
---
-   Clearly define the theming strategy (single vs. multi-theme) at the start of UI development to avoid rework.
-   Regularly review and refactor Tailwind CSS for maintainability and consistency as the application grows.

---

### YYYY-MM-DD: Modal Interaction Refinements & POI Gallery Flow
-   For complex scenarios with multiple stacked overlays, a more robust system (like a global overlay manager or React Context) for managing their interactions and click-outside behavior might be beneficial instead of CSS class-based heuristics for identifying overlays.

---

### 2025-05-25: Local Time Scheduling for Admin Tasks (pg_cron)
-   **Topic/Feature**: Admin Panel - Scheduled Tasks (Backup & Reset) Timezone Handling.
-   **Observation/Pattern**:
    1.  The `pg_cron` extension schedules jobs based on the PostgreSQL server's time (typically UTC).
    2.  Users need to schedule tasks (like backups and map resets) in their local time for convenience.
    3.  Directly converting local time with DST considerations to accurate UTC components (hour, minute, day of week) for a CRON expression within a Deno Edge Function (Supabase Function) is complex and error-prone without a robust date/timezone library. Vanilla JavaScript `Date` object has limitations for reliable future-dated timezone conversions across all timezones and DST changes.
-   **Decision/Action Taken**:
    1.  **Frontend (`AdminPanel.tsx`):** The user interface will collect the desired local time, date, and frequency. It will also automatically detect and send the user's browser timezone identifier (e.g., "Europe/Berlin") to the backend. Scheduled times fetched from the backend (which are based on UTC cron) will be converted to local time for display.
    2.  **Backend (SQL Function):** A new PostgreSQL helper function, `convert_to_utc_components(local_dt_str TEXT, tz TEXT)`, was created. This function takes a local timestamp string (e.g., "YYYY-MM-DD HH:MM:SS") and a timezone identifier. It uses PostgreSQL's built-in timezone conversion capabilities to return the corresponding UTC hour, UTC minute, and UTC day of the week.
    3.  **Backend (`schedule-admin-task` Supabase Function):** This Edge Function was modified to:
        - Accept the local time, local date, frequency, and user's `timezone` from the frontend.
        - Call the `convert_to_utc_components` SQL function via RPC, passing the combined local date/time string and the user's timezone.
        - Use the UTC components returned by the SQL function to construct the `pg_cron` CRON expression.
        - The job name for the cron task is constructed using local time components for easier identification in logs or admin interfaces.
-   **Rationale**:
    -   Leverages PostgreSQL's robust and accurate timezone handling, which is superior to attempting complex timezone arithmetic in a JavaScript environment for cron scheduling.
    -   Keeps the Edge Function relatively lightweight by offloading the core timezone conversion to the database.
    -   Provides a good user experience by allowing local time input and display, while ensuring correct UTC scheduling in `pg_cron`.
-   **Impact/Outcome**:
    -   Scheduled admin tasks can now be reliably set by users in their local time.
    -   The system correctly converts these local times to UTC for `pg_cron`, accounting for different timezones and Daylight Saving Time rules as handled by PostgreSQL.
-   **Future Consideration**:
    -   Ensure the list of IANA timezone names used by PostgreSQL is comprehensive and matches what browsers might send. PostgreSQL typically uses the standard IANA Time Zone Database.
    -   Monitor the `convert_to_utc_components` function for any errors, especially if unexpected `local_dt_str` formats or `tz` identifiers are encountered. The function includes basic error logging.
---
